2025-08-04 17:26:08 [main] INFO  c.a.cafeteria.CafeteriaApplication - Starting CafeteriaApplication using Java 24.0.1 with PID 7640 (C:\Gen C Projects\atomix\Atomix\backend\target\classes started by 2431290 in C:\Gen C Projects\atomix\Atomix\backend)
2025-08-04 17:26:08 [main] INFO  c.a.cafeteria.CafeteriaApplication - No active profile set, falling back to 1 default profile: "default"
2025-08-04 17:26:10 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-08-04 17:26:10 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 74 ms. Found 4 JPA repository interfaces.
2025-08-04 17:26:11 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8083 (http)
2025-08-04 17:26:11 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-08-04 17:26:11 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-08-04 17:26:11 [main] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring embedded WebApplicationContext
2025-08-04 17:26:11 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2521 ms
2025-08-04 17:26:11 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-08-04 17:26:11 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.13.Final
2025-08-04 17:26:11 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-08-04 17:26:12 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-08-04 17:26:12 [main] WARN  org.hibernate.orm.deprecation - HHH90000021: Encountered deprecated setting [hibernate.temp.use_jdbc_metadata_defaults], use [hibernate.boot.allow_jdbc_metadata_access] instead
2025-08-04 17:26:12 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-08-04 17:26:12 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [undefined/unknown]
	Database driver: undefined/unknown
	Database version: 2.1.214
	Autocommit mode: undefined/unknown
	Isolation level: <unknown>
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-08-04 17:26:13 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-08-04 17:26:13 [main] DEBUG org.hibernate.SQL - 
    drop table if exists menu_item_ingredients cascade 
2025-08-04 17:26:13 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-08-04 17:26:14 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:atomix_db user=SA
2025-08-04 17:26:14 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-08-04 17:26:14 [main] DEBUG org.hibernate.SQL - 
    drop table if exists menu_item_tags cascade 
2025-08-04 17:26:14 [main] DEBUG org.hibernate.SQL - 
    drop table if exists menu_items cascade 
2025-08-04 17:26:14 [main] DEBUG org.hibernate.SQL - 
    drop table if exists order_items cascade 
2025-08-04 17:26:14 [main] DEBUG org.hibernate.SQL - 
    drop table if exists orders cascade 
2025-08-04 17:26:14 [main] DEBUG org.hibernate.SQL - 
    drop table if exists payments cascade 
2025-08-04 17:26:14 [main] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade 
2025-08-04 17:26:14 [main] DEBUG org.hibernate.SQL - 
    drop table if exists vendor_floor_mappings cascade 
2025-08-04 17:26:14 [main] DEBUG org.hibernate.SQL - 
    drop table if exists vendors cascade 
2025-08-04 17:26:14 [main] DEBUG org.hibernate.SQL - 
    create table menu_item_ingredients (
        menu_item_id bigint not null,
        ingredient varchar(255)
    )
2025-08-04 17:26:14 [main] DEBUG org.hibernate.SQL - 
    create table menu_item_tags (
        menu_item_id bigint not null,
        tag varchar(255)
    )
2025-08-04 17:26:14 [main] DEBUG org.hibernate.SQL - 
    create table menu_items (
        calories integer,
        carbs_grams integer,
        fat_grams integer,
        is_available boolean,
        is_limited_quantity boolean,
        preparation_time integer,
        price numeric(38,2) not null,
        protein_grams integer,
        quantity_available integer,
        rating numeric(38,2),
        rating_count integer,
        votes_count integer,
        available_from timestamp(6),
        available_until timestamp(6),
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6),
        vendor_id bigint not null,
        description TEXT,
        floor_id varchar(255),
        image_url varchar(255),
        name varchar(255) not null,
        category enum ('BEVERAGES','BREAKFAST','DESSERTS','DINNER','LUNCH','SALADS','SNACKS','SOUPS') not null,
        primary key (id)
    )
2025-08-04 17:26:14 [main] DEBUG org.hibernate.SQL - 
    create table order_items (
        price numeric(38,2) not null,
        quantity integer not null,
        id bigint generated by default as identity,
        menu_item_id bigint not null,
        order_id bigint not null,
        menu_item_description TEXT,
        menu_item_image_url varchar(255),
        menu_item_name varchar(255) not null,
        special_instructions TEXT,
        primary key (id)
    )
2025-08-04 17:26:14 [main] DEBUG org.hibernate.SQL - 
    create table orders (
        actual_preparation_time integer,
        discount_amount numeric(38,2),
        estimated_preparation_time integer,
        tax_amount numeric(38,2),
        total_amount numeric(38,2) not null,
        cancelled_at timestamp(6),
        completed_at timestamp(6),
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        order_confirmed_at timestamp(6),
        pickup_time timestamp(6),
        preparation_started_at timestamp(6),
        ready_at timestamp(6),
        updated_at timestamp(6),
        user_id bigint not null,
        vendor_id bigint not null,
        cancellation_reason varchar(255),
        order_number varchar(255) not null unique,
        payment_transaction_id varchar(255),
        special_instructions TEXT,
        payment_method enum ('CASH','CREDIT_CARD','DEBIT_CARD','FOOD_CARD','NET_BANKING','RAZORPAY','STRIPE','UPI','WALLET'),
        payment_status enum ('CANCELLED','COMPLETED','CREATED','FAILED','PENDING'),
        status enum ('CANCELLED','COMPLETED','CONFIRMED','PENDING','PREPARING','READY','REFUNDED') not null,
        primary key (id)
    )
2025-08-04 17:26:14 [main] DEBUG org.hibernate.SQL - 
    create table payments (
        amount numeric(10,2) not null,
        refund_amount numeric(10,2),
        created_at timestamp(6) not null,
        failed_at timestamp(6),
        gateway_created_at timestamp(6),
        id bigint generated by default as identity,
        order_id bigint,
        processed_at timestamp(6),
        refunded_at timestamp(6),
        updated_at timestamp(6),
        user_id bigint not null,
        description varchar(255),
        failure_reason varchar(255),
        gateway_currency varchar(255),
        gateway_order_id varchar(255),
        gateway_payment_id varchar(255),
        gateway_receipt varchar(255),
        gateway_signature varchar(255),
        payment_id varchar(255) not null unique,
        refund_id varchar(255),
        payment_method enum ('CASH','CREDIT_CARD','DEBIT_CARD','FOOD_CARD','NET_BANKING','RAZORPAY','STRIPE','UPI','WALLET') not null,
        payment_status enum ('CANCELLED','COMPLETED','CREATED','FAILED','PENDING') not null,
        payment_type enum ('FOOD_CARD_TOPUP','ORDER_PAYMENT') not null,
        primary key (id)
    )
2025-08-04 17:26:14 [main] DEBUG org.hibernate.SQL - 
    create table users (
        email_verified boolean,
        food_card_balance float(53),
        is_active boolean,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6),
        department varchar(255),
        email varchar(255) not null unique,
        employee_id varchar(255),
        first_name varchar(255) not null,
        floor_id varchar(255),
        last_name varchar(255) not null,
        password varchar(255) not null,
        phone_number varchar(255),
        profile_image varchar(255),
        provider varchar(255),
        provider_id varchar(255),
        role enum ('ADMIN','CAFETERIA_MANAGER','EMPLOYEE','VENDOR') not null,
        primary key (id)
    )
2025-08-04 17:26:14 [main] DEBUG org.hibernate.SQL - 
    create table vendor_floor_mappings (
        vendor_id bigint not null,
        floor_id varchar(255)
    )
2025-08-04 17:26:14 [main] DEBUG org.hibernate.SQL - 
    create table vendors (
        average_rating float(53),
        is_active boolean,
        total_reviews integer,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        temporary_end_date timestamp(6),
        temporary_start_date timestamp(6),
        updated_at timestamp(6),
        business_license varchar(255),
        contact_email varchar(255) not null,
        contact_person varchar(255),
        contact_phone varchar(255),
        description TEXT,
        location_description varchar(255),
        logo_url varchar(255),
        name varchar(255) not null unique,
        operating_hours varchar(255),
        status enum ('APPROVED','INACTIVE','PENDING','REJECTED','SUSPENDED') not null,
        vendor_type enum ('EVENT_BASED','PERMANENT','SEASONAL','TEMPORARY'),
        primary key (id)
    )
2025-08-04 17:26:14 [main] DEBUG org.hibernate.SQL - 
    alter table if exists menu_item_ingredients 
       add constraint FKbrorwv22pmcc7k7icifrdq3kw 
       foreign key (menu_item_id) 
       references menu_items
2025-08-04 17:26:14 [main] DEBUG org.hibernate.SQL - 
    alter table if exists menu_item_tags 
       add constraint FKq0w40spbbg98xktnqo0paym6m 
       foreign key (menu_item_id) 
       references menu_items
2025-08-04 17:26:14 [main] DEBUG org.hibernate.SQL - 
    alter table if exists menu_items 
       add constraint FKmv8b8f2lesk5fmqouqhwuhsiy 
       foreign key (vendor_id) 
       references vendors
2025-08-04 17:26:14 [main] DEBUG org.hibernate.SQL - 
    alter table if exists order_items 
       add constraint FKdtfg1f49yr5yye2fpl2xid2xo 
       foreign key (menu_item_id) 
       references menu_items
2025-08-04 17:26:14 [main] DEBUG org.hibernate.SQL - 
    alter table if exists order_items 
       add constraint FKbioxgbv59vetrxe0ejfubep1w 
       foreign key (order_id) 
       references orders
2025-08-04 17:26:14 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FK32ql8ubntj5uh44ph9659tiih 
       foreign key (user_id) 
       references users
2025-08-04 17:26:14 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FKb1443sk0bxprtkqree3o2qk90 
       foreign key (vendor_id) 
       references vendors
2025-08-04 17:26:14 [main] DEBUG org.hibernate.SQL - 
    alter table if exists payments 
       add constraint FK81gagumt0r8y3rmudcgpbk42l 
       foreign key (order_id) 
       references orders
2025-08-04 17:26:14 [main] DEBUG org.hibernate.SQL - 
    alter table if exists payments 
       add constraint FKj94hgy9v5fw1munb90tar2eje 
       foreign key (user_id) 
       references users
2025-08-04 17:26:14 [main] DEBUG org.hibernate.SQL - 
    alter table if exists vendor_floor_mappings 
       add constraint FKh3rcyc9pf738akekrctslku6p 
       foreign key (vendor_id) 
       references vendors
2025-08-04 17:26:14 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-08-04 17:26:14 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-08-04 17:26:18 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-08-04 17:26:18 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-08-04 17:26:18 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@58a1faa]]
2025-08-04 17:26:18 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-08-04 17:26:18 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8083 (http) with context path '/api/v1'
2025-08-04 17:26:19 [main] INFO  c.a.cafeteria.CafeteriaApplication - Started CafeteriaApplication in 10.991 seconds (process running for 11.601)
2025-08-04 17:26:19 [main] DEBUG org.hibernate.SQL - 
    /* select
        count(*) 
    from
        User x */ select
            count(*) 
        from
            users u1_0
2025-08-04 17:26:19 [main] DEBUG org.hibernate.SQL - 
    /* insert for
        com.atomix.cafeteria.entity.User */insert 
    into
        users (created_at, department, email, email_verified, employee_id, first_name, floor_id, food_card_balance, is_active, last_name, password, phone_number, profile_image, provider, provider_id, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-08-04 17:26:19 [main] DEBUG org.hibernate.SQL - 
    /* insert for
        com.atomix.cafeteria.entity.User */insert 
    into
        users (created_at, department, email, email_verified, employee_id, first_name, floor_id, food_card_balance, is_active, last_name, password, phone_number, profile_image, provider, provider_id, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-08-04 17:26:19 [main] DEBUG org.hibernate.SQL - 
    /* insert for
        com.atomix.cafeteria.entity.User */insert 
    into
        users (created_at, department, email, email_verified, employee_id, first_name, floor_id, food_card_balance, is_active, last_name, password, phone_number, profile_image, provider, provider_id, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-08-04 17:26:19 [main] DEBUG org.hibernate.SQL - 
    /* insert for
        com.atomix.cafeteria.entity.User */insert 
    into
        users (created_at, department, email, email_verified, employee_id, first_name, floor_id, food_card_balance, is_active, last_name, password, phone_number, profile_image, provider, provider_id, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-08-04 17:26:19 [main] DEBUG org.hibernate.SQL - 
    /* insert for
        com.atomix.cafeteria.entity.User */insert 
    into
        users (created_at, department, email, email_verified, employee_id, first_name, floor_id, food_card_balance, is_active, last_name, password, phone_number, profile_image, provider, provider_id, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-08-04 17:27:18 [MessageBroker-1] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2025-08-04 17:29:46 [http-nio-8083-exec-1] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-08-04 17:29:46 [http-nio-8083-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-08-04 17:29:47 [http-nio-8083-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 203 ms
2025-08-04 17:29:47 [http-nio-8083-exec-1] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-08-04 17:29:47 [http-nio-8083-exec-1] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-08-04 17:29:47 [http-nio-8083-exec-1] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-08-04 17:29:47 [http-nio-8083-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /auth/me
2025-08-04 17:29:47 [http-nio-8083-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-08-04 17:29:47 [http-nio-8083-exec-2] ERROR c.a.c.s.JwtAuthenticationFilter - Cannot set user authentication: The specified key byte array is 88 bits which is not secure enough for any JWT HMAC-SHA algorithm.  The JWT JWA Specification (RFC 7518, Section 3.2) states that keys used with HMAC-SHA algorithms MUST have a size >= 256 bits (the key size must be greater than or equal to the hash output size).  Consider using the Jwts.SIG.HS256.key() builder (or HS384.key() or HS512.key()) to create a key guaranteed to be secure enough for your preferred HMAC-SHA algorithm.  See https://tools.ietf.org/html/rfc7518#section-3.2 for more information.
2025-08-04 17:29:47 [http-nio-8083-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-04 17:29:47 [http-nio-8083-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-08-04 17:30:01 [http-nio-8083-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /orders/my-orders
2025-08-04 17:30:01 [http-nio-8083-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /orders/my-orders
2025-08-04 17:30:01 [http-nio-8083-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /orders/my-orders
2025-08-04 17:30:01 [http-nio-8083-exec-5] ERROR c.a.c.s.JwtAuthenticationFilter - Cannot set user authentication: The specified key byte array is 88 bits which is not secure enough for any JWT HMAC-SHA algorithm.  The JWT JWA Specification (RFC 7518, Section 3.2) states that keys used with HMAC-SHA algorithms MUST have a size >= 256 bits (the key size must be greater than or equal to the hash output size).  Consider using the Jwts.SIG.HS256.key() builder (or HS384.key() or HS512.key()) to create a key guaranteed to be secure enough for your preferred HMAC-SHA algorithm.  See https://tools.ietf.org/html/rfc7518#section-3.2 for more information.
2025-08-04 17:30:01 [http-nio-8083-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-04 17:30:01 [http-nio-8083-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-08-04 17:30:01 [http-nio-8083-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-08-04 17:30:01 [http-nio-8083-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-04 17:30:01 [http-nio-8083-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-08-04 17:30:01 [http-nio-8083-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /orders/my-orders
2025-08-04 17:30:01 [http-nio-8083-exec-6] ERROR c.a.c.s.JwtAuthenticationFilter - Cannot set user authentication: The specified key byte array is 88 bits which is not secure enough for any JWT HMAC-SHA algorithm.  The JWT JWA Specification (RFC 7518, Section 3.2) states that keys used with HMAC-SHA algorithms MUST have a size >= 256 bits (the key size must be greater than or equal to the hash output size).  Consider using the Jwts.SIG.HS256.key() builder (or HS384.key() or HS512.key()) to create a key guaranteed to be secure enough for your preferred HMAC-SHA algorithm.  See https://tools.ietf.org/html/rfc7518#section-3.2 for more information.
2025-08-04 17:30:01 [http-nio-8083-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-04 17:30:01 [http-nio-8083-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-08-04 17:30:01 [http-nio-8083-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-08-04 17:30:01 [http-nio-8083-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-04 17:30:01 [http-nio-8083-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-08-04 17:30:07 [http-nio-8083-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /auth/logout
2025-08-04 17:30:07 [http-nio-8083-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/logout
2025-08-04 17:30:07 [http-nio-8083-exec-8] ERROR c.a.c.s.JwtAuthenticationFilter - Cannot set user authentication: The specified key byte array is 88 bits which is not secure enough for any JWT HMAC-SHA algorithm.  The JWT JWA Specification (RFC 7518, Section 3.2) states that keys used with HMAC-SHA algorithms MUST have a size >= 256 bits (the key size must be greater than or equal to the hash output size).  Consider using the Jwts.SIG.HS256.key() builder (or HS384.key() or HS512.key()) to create a key guaranteed to be secure enough for your preferred HMAC-SHA algorithm.  See https://tools.ietf.org/html/rfc7518#section-3.2 for more information.
2025-08-04 17:30:07 [http-nio-8083-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-04 17:30:07 [http-nio-8083-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/logout
2025-08-04 17:33:32 [http-nio-8083-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/logout
2025-08-04 17:33:32 [http-nio-8083-exec-1] ERROR c.a.c.s.JwtAuthenticationFilter - Cannot set user authentication: The specified key byte array is 88 bits which is not secure enough for any JWT HMAC-SHA algorithm.  The JWT JWA Specification (RFC 7518, Section 3.2) states that keys used with HMAC-SHA algorithms MUST have a size >= 256 bits (the key size must be greater than or equal to the hash output size).  Consider using the Jwts.SIG.HS256.key() builder (or HS384.key() or HS512.key()) to create a key guaranteed to be secure enough for your preferred HMAC-SHA algorithm.  See https://tools.ietf.org/html/rfc7518#section-3.2 for more information.
2025-08-04 17:33:32 [http-nio-8083-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-04 17:33:32 [http-nio-8083-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/logout
2025-08-04 17:33:39 [http-nio-8083-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /orders/my-orders
2025-08-04 17:33:39 [http-nio-8083-exec-2] ERROR c.a.c.s.JwtAuthenticationFilter - Cannot set user authentication: The specified key byte array is 88 bits which is not secure enough for any JWT HMAC-SHA algorithm.  The JWT JWA Specification (RFC 7518, Section 3.2) states that keys used with HMAC-SHA algorithms MUST have a size >= 256 bits (the key size must be greater than or equal to the hash output size).  Consider using the Jwts.SIG.HS256.key() builder (or HS384.key() or HS512.key()) to create a key guaranteed to be secure enough for your preferred HMAC-SHA algorithm.  See https://tools.ietf.org/html/rfc7518#section-3.2 for more information.
2025-08-04 17:33:39 [http-nio-8083-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-04 17:33:39 [http-nio-8083-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-08-04 17:33:39 [http-nio-8083-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-08-04 17:33:39 [http-nio-8083-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-04 17:33:39 [http-nio-8083-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-08-04 17:33:39 [http-nio-8083-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /orders/my-orders
2025-08-04 17:33:39 [http-nio-8083-exec-4] ERROR c.a.c.s.JwtAuthenticationFilter - Cannot set user authentication: The specified key byte array is 88 bits which is not secure enough for any JWT HMAC-SHA algorithm.  The JWT JWA Specification (RFC 7518, Section 3.2) states that keys used with HMAC-SHA algorithms MUST have a size >= 256 bits (the key size must be greater than or equal to the hash output size).  Consider using the Jwts.SIG.HS256.key() builder (or HS384.key() or HS512.key()) to create a key guaranteed to be secure enough for your preferred HMAC-SHA algorithm.  See https://tools.ietf.org/html/rfc7518#section-3.2 for more information.
2025-08-04 17:33:39 [http-nio-8083-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-04 17:33:39 [http-nio-8083-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-08-04 17:33:39 [http-nio-8083-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-08-04 17:33:39 [http-nio-8083-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-04 17:33:39 [http-nio-8083-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-08-04 17:33:52 [http-nio-8083-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/logout
2025-08-04 17:33:52 [http-nio-8083-exec-3] ERROR c.a.c.s.JwtAuthenticationFilter - Cannot set user authentication: The specified key byte array is 88 bits which is not secure enough for any JWT HMAC-SHA algorithm.  The JWT JWA Specification (RFC 7518, Section 3.2) states that keys used with HMAC-SHA algorithms MUST have a size >= 256 bits (the key size must be greater than or equal to the hash output size).  Consider using the Jwts.SIG.HS256.key() builder (or HS384.key() or HS512.key()) to create a key guaranteed to be secure enough for your preferred HMAC-SHA algorithm.  See https://tools.ietf.org/html/rfc7518#section-3.2 for more information.
2025-08-04 17:33:52 [http-nio-8083-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-04 17:33:52 [http-nio-8083-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/logout
2025-08-04 17:34:16 [http-nio-8083-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/logout
2025-08-04 17:34:16 [http-nio-8083-exec-5] ERROR c.a.c.s.JwtAuthenticationFilter - Cannot set user authentication: The specified key byte array is 88 bits which is not secure enough for any JWT HMAC-SHA algorithm.  The JWT JWA Specification (RFC 7518, Section 3.2) states that keys used with HMAC-SHA algorithms MUST have a size >= 256 bits (the key size must be greater than or equal to the hash output size).  Consider using the Jwts.SIG.HS256.key() builder (or HS384.key() or HS512.key()) to create a key guaranteed to be secure enough for your preferred HMAC-SHA algorithm.  See https://tools.ietf.org/html/rfc7518#section-3.2 for more information.
2025-08-04 17:34:16 [http-nio-8083-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-04 17:34:16 [http-nio-8083-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/logout
2025-08-04 17:36:31 [main] INFO  c.a.cafeteria.CafeteriaApplication - Starting CafeteriaApplication using Java 24.0.1 with PID 23100 (C:\Gen C Projects\atomix\Atomix\backend\target\classes started by 2431290 in C:\Gen C Projects\atomix\Atomix\backend)
2025-08-04 17:36:31 [main] INFO  c.a.cafeteria.CafeteriaApplication - No active profile set, falling back to 1 default profile: "default"
2025-08-04 17:36:32 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-08-04 17:36:32 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 58 ms. Found 4 JPA repository interfaces.
2025-08-04 17:36:33 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8083 (http)
2025-08-04 17:36:33 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-08-04 17:36:33 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-08-04 17:36:33 [main] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring embedded WebApplicationContext
2025-08-04 17:36:33 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1813 ms
2025-08-04 17:36:33 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-08-04 17:36:33 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.13.Final
2025-08-04 17:36:33 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-08-04 17:36:34 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-08-04 17:36:34 [main] WARN  org.hibernate.orm.deprecation - HHH90000021: Encountered deprecated setting [hibernate.temp.use_jdbc_metadata_defaults], use [hibernate.boot.allow_jdbc_metadata_access] instead
2025-08-04 17:36:34 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-08-04 17:36:34 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [undefined/unknown]
	Database driver: undefined/unknown
	Database version: 2.1.214
	Autocommit mode: undefined/unknown
	Isolation level: <unknown>
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-08-04 17:36:35 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-08-04 17:36:35 [main] DEBUG org.hibernate.SQL - 
    drop table if exists menu_item_ingredients cascade 
2025-08-04 17:36:35 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-08-04 17:36:35 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:atomix_db user=SA
2025-08-04 17:36:35 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-08-04 17:36:35 [main] DEBUG org.hibernate.SQL - 
    drop table if exists menu_item_tags cascade 
2025-08-04 17:36:35 [main] DEBUG org.hibernate.SQL - 
    drop table if exists menu_items cascade 
2025-08-04 17:36:35 [main] DEBUG org.hibernate.SQL - 
    drop table if exists order_items cascade 
2025-08-04 17:36:35 [main] DEBUG org.hibernate.SQL - 
    drop table if exists orders cascade 
2025-08-04 17:36:35 [main] DEBUG org.hibernate.SQL - 
    drop table if exists payments cascade 
2025-08-04 17:36:35 [main] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade 
2025-08-04 17:36:35 [main] DEBUG org.hibernate.SQL - 
    drop table if exists vendor_floor_mappings cascade 
2025-08-04 17:36:35 [main] DEBUG org.hibernate.SQL - 
    drop table if exists vendors cascade 
2025-08-04 17:36:35 [main] DEBUG org.hibernate.SQL - 
    create table menu_item_ingredients (
        menu_item_id bigint not null,
        ingredient varchar(255)
    )
2025-08-04 17:36:35 [main] DEBUG org.hibernate.SQL - 
    create table menu_item_tags (
        menu_item_id bigint not null,
        tag varchar(255)
    )
2025-08-04 17:36:35 [main] DEBUG org.hibernate.SQL - 
    create table menu_items (
        calories integer,
        carbs_grams integer,
        fat_grams integer,
        is_available boolean,
        is_limited_quantity boolean,
        preparation_time integer,
        price numeric(38,2) not null,
        protein_grams integer,
        quantity_available integer,
        rating numeric(38,2),
        rating_count integer,
        votes_count integer,
        available_from timestamp(6),
        available_until timestamp(6),
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6),
        vendor_id bigint not null,
        description TEXT,
        floor_id varchar(255),
        image_url varchar(255),
        name varchar(255) not null,
        category enum ('BEVERAGES','BREAKFAST','DESSERTS','DINNER','LUNCH','SALADS','SNACKS','SOUPS') not null,
        primary key (id)
    )
2025-08-04 17:36:35 [main] DEBUG org.hibernate.SQL - 
    create table order_items (
        price numeric(38,2) not null,
        quantity integer not null,
        id bigint generated by default as identity,
        menu_item_id bigint not null,
        order_id bigint not null,
        menu_item_description TEXT,
        menu_item_image_url varchar(255),
        menu_item_name varchar(255) not null,
        special_instructions TEXT,
        primary key (id)
    )
2025-08-04 17:36:35 [main] DEBUG org.hibernate.SQL - 
    create table orders (
        actual_preparation_time integer,
        discount_amount numeric(38,2),
        estimated_preparation_time integer,
        tax_amount numeric(38,2),
        total_amount numeric(38,2) not null,
        cancelled_at timestamp(6),
        completed_at timestamp(6),
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        order_confirmed_at timestamp(6),
        pickup_time timestamp(6),
        preparation_started_at timestamp(6),
        ready_at timestamp(6),
        updated_at timestamp(6),
        user_id bigint not null,
        vendor_id bigint not null,
        cancellation_reason varchar(255),
        order_number varchar(255) not null unique,
        payment_transaction_id varchar(255),
        special_instructions TEXT,
        payment_method enum ('CASH','CREDIT_CARD','DEBIT_CARD','FOOD_CARD','NET_BANKING','RAZORPAY','STRIPE','UPI','WALLET'),
        payment_status enum ('CANCELLED','COMPLETED','CREATED','FAILED','PENDING'),
        status enum ('CANCELLED','COMPLETED','CONFIRMED','PENDING','PREPARING','READY','REFUNDED') not null,
        primary key (id)
    )
2025-08-04 17:36:36 [main] DEBUG org.hibernate.SQL - 
    create table payments (
        amount numeric(10,2) not null,
        refund_amount numeric(10,2),
        created_at timestamp(6) not null,
        failed_at timestamp(6),
        gateway_created_at timestamp(6),
        id bigint generated by default as identity,
        order_id bigint,
        processed_at timestamp(6),
        refunded_at timestamp(6),
        updated_at timestamp(6),
        user_id bigint not null,
        description varchar(255),
        failure_reason varchar(255),
        gateway_currency varchar(255),
        gateway_order_id varchar(255),
        gateway_payment_id varchar(255),
        gateway_receipt varchar(255),
        gateway_signature varchar(255),
        payment_id varchar(255) not null unique,
        refund_id varchar(255),
        payment_method enum ('CASH','CREDIT_CARD','DEBIT_CARD','FOOD_CARD','NET_BANKING','RAZORPAY','STRIPE','UPI','WALLET') not null,
        payment_status enum ('CANCELLED','COMPLETED','CREATED','FAILED','PENDING') not null,
        payment_type enum ('FOOD_CARD_TOPUP','ORDER_PAYMENT') not null,
        primary key (id)
    )
2025-08-04 17:36:36 [main] DEBUG org.hibernate.SQL - 
    create table users (
        email_verified boolean,
        food_card_balance float(53),
        is_active boolean,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6),
        department varchar(255),
        email varchar(255) not null unique,
        employee_id varchar(255),
        first_name varchar(255) not null,
        floor_id varchar(255),
        last_name varchar(255) not null,
        password varchar(255) not null,
        phone_number varchar(255),
        profile_image varchar(255),
        provider varchar(255),
        provider_id varchar(255),
        role enum ('ADMIN','CAFETERIA_MANAGER','EMPLOYEE','VENDOR') not null,
        primary key (id)
    )
2025-08-04 17:36:36 [main] DEBUG org.hibernate.SQL - 
    create table vendor_floor_mappings (
        vendor_id bigint not null,
        floor_id varchar(255)
    )
2025-08-04 17:36:36 [main] DEBUG org.hibernate.SQL - 
    create table vendors (
        average_rating float(53),
        is_active boolean,
        total_reviews integer,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        temporary_end_date timestamp(6),
        temporary_start_date timestamp(6),
        updated_at timestamp(6),
        business_license varchar(255),
        contact_email varchar(255) not null,
        contact_person varchar(255),
        contact_phone varchar(255),
        description TEXT,
        location_description varchar(255),
        logo_url varchar(255),
        name varchar(255) not null unique,
        operating_hours varchar(255),
        status enum ('APPROVED','INACTIVE','PENDING','REJECTED','SUSPENDED') not null,
        vendor_type enum ('EVENT_BASED','PERMANENT','SEASONAL','TEMPORARY'),
        primary key (id)
    )
2025-08-04 17:36:36 [main] DEBUG org.hibernate.SQL - 
    alter table if exists menu_item_ingredients 
       add constraint FKbrorwv22pmcc7k7icifrdq3kw 
       foreign key (menu_item_id) 
       references menu_items
2025-08-04 17:36:36 [main] DEBUG org.hibernate.SQL - 
    alter table if exists menu_item_tags 
       add constraint FKq0w40spbbg98xktnqo0paym6m 
       foreign key (menu_item_id) 
       references menu_items
2025-08-04 17:36:36 [main] DEBUG org.hibernate.SQL - 
    alter table if exists menu_items 
       add constraint FKmv8b8f2lesk5fmqouqhwuhsiy 
       foreign key (vendor_id) 
       references vendors
2025-08-04 17:36:36 [main] DEBUG org.hibernate.SQL - 
    alter table if exists order_items 
       add constraint FKdtfg1f49yr5yye2fpl2xid2xo 
       foreign key (menu_item_id) 
       references menu_items
2025-08-04 17:36:36 [main] DEBUG org.hibernate.SQL - 
    alter table if exists order_items 
       add constraint FKbioxgbv59vetrxe0ejfubep1w 
       foreign key (order_id) 
       references orders
2025-08-04 17:36:36 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FK32ql8ubntj5uh44ph9659tiih 
       foreign key (user_id) 
       references users
2025-08-04 17:36:36 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FKb1443sk0bxprtkqree3o2qk90 
       foreign key (vendor_id) 
       references vendors
2025-08-04 17:36:36 [main] DEBUG org.hibernate.SQL - 
    alter table if exists payments 
       add constraint FK81gagumt0r8y3rmudcgpbk42l 
       foreign key (order_id) 
       references orders
2025-08-04 17:36:36 [main] DEBUG org.hibernate.SQL - 
    alter table if exists payments 
       add constraint FKj94hgy9v5fw1munb90tar2eje 
       foreign key (user_id) 
       references users
2025-08-04 17:36:36 [main] DEBUG org.hibernate.SQL - 
    alter table if exists vendor_floor_mappings 
       add constraint FKh3rcyc9pf738akekrctslku6p 
       foreign key (vendor_id) 
       references vendors
2025-08-04 17:36:36 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-08-04 17:36:36 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-08-04 17:36:40 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-08-04 17:36:40 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-08-04 17:36:40 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@23dea00f]]
2025-08-04 17:36:40 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-08-04 17:36:40 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8083 (http) with context path '/api/v1'
2025-08-04 17:36:40 [main] INFO  c.a.cafeteria.CafeteriaApplication - Started CafeteriaApplication in 9.564 seconds (process running for 9.968)
2025-08-04 17:36:40 [main] DEBUG org.hibernate.SQL - 
    /* select
        count(*) 
    from
        User x */ select
            count(*) 
        from
            users u1_0
2025-08-04 17:36:41 [main] DEBUG org.hibernate.SQL - 
    /* insert for
        com.atomix.cafeteria.entity.User */insert 
    into
        users (created_at, department, email, email_verified, employee_id, first_name, floor_id, food_card_balance, is_active, last_name, password, phone_number, profile_image, provider, provider_id, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-08-04 17:36:41 [main] DEBUG org.hibernate.SQL - 
    /* insert for
        com.atomix.cafeteria.entity.User */insert 
    into
        users (created_at, department, email, email_verified, employee_id, first_name, floor_id, food_card_balance, is_active, last_name, password, phone_number, profile_image, provider, provider_id, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-08-04 17:36:41 [main] DEBUG org.hibernate.SQL - 
    /* insert for
        com.atomix.cafeteria.entity.User */insert 
    into
        users (created_at, department, email, email_verified, employee_id, first_name, floor_id, food_card_balance, is_active, last_name, password, phone_number, profile_image, provider, provider_id, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-08-04 17:36:41 [main] DEBUG org.hibernate.SQL - 
    /* insert for
        com.atomix.cafeteria.entity.User */insert 
    into
        users (created_at, department, email, email_verified, employee_id, first_name, floor_id, food_card_balance, is_active, last_name, password, phone_number, profile_image, provider, provider_id, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-08-04 17:36:41 [main] DEBUG org.hibernate.SQL - 
    /* insert for
        com.atomix.cafeteria.entity.User */insert 
    into
        users (created_at, department, email, email_verified, employee_id, first_name, floor_id, food_card_balance, is_active, last_name, password, phone_number, profile_image, provider, provider_id, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-08-04 17:36:54 [http-nio-8083-exec-1] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-08-04 17:36:54 [http-nio-8083-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-08-04 17:36:54 [http-nio-8083-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 138 ms
2025-08-04 17:36:54 [http-nio-8083-exec-1] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-08-04 17:36:54 [http-nio-8083-exec-1] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-08-04 17:36:54 [http-nio-8083-exec-1] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-08-04 17:36:54 [http-nio-8083-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/logout
2025-08-04 17:36:54 [http-nio-8083-exec-1] ERROR c.a.c.s.JwtAuthenticationFilter - Cannot set user authentication: The specified key byte array is 88 bits which is not secure enough for any JWT HMAC-SHA algorithm.  The JWT JWA Specification (RFC 7518, Section 3.2) states that keys used with HMAC-SHA algorithms MUST have a size >= 256 bits (the key size must be greater than or equal to the hash output size).  Consider using the Jwts.SIG.HS256.key() builder (or HS384.key() or HS512.key()) to create a key guaranteed to be secure enough for your preferred HMAC-SHA algorithm.  See https://tools.ietf.org/html/rfc7518#section-3.2 for more information.
2025-08-04 17:36:55 [http-nio-8083-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-04 17:36:55 [http-nio-8083-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/logout
2025-08-04 17:36:58 [http-nio-8083-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /orders/my-orders
2025-08-04 17:36:58 [http-nio-8083-exec-2] ERROR c.a.c.s.JwtAuthenticationFilter - Cannot set user authentication: The specified key byte array is 88 bits which is not secure enough for any JWT HMAC-SHA algorithm.  The JWT JWA Specification (RFC 7518, Section 3.2) states that keys used with HMAC-SHA algorithms MUST have a size >= 256 bits (the key size must be greater than or equal to the hash output size).  Consider using the Jwts.SIG.HS256.key() builder (or HS384.key() or HS512.key()) to create a key guaranteed to be secure enough for your preferred HMAC-SHA algorithm.  See https://tools.ietf.org/html/rfc7518#section-3.2 for more information.
2025-08-04 17:36:58 [http-nio-8083-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-04 17:36:58 [http-nio-8083-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-08-04 17:36:58 [http-nio-8083-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-08-04 17:36:58 [http-nio-8083-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-04 17:36:58 [http-nio-8083-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-08-04 17:36:58 [http-nio-8083-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /orders/my-orders
2025-08-04 17:36:58 [http-nio-8083-exec-3] ERROR c.a.c.s.JwtAuthenticationFilter - Cannot set user authentication: The specified key byte array is 88 bits which is not secure enough for any JWT HMAC-SHA algorithm.  The JWT JWA Specification (RFC 7518, Section 3.2) states that keys used with HMAC-SHA algorithms MUST have a size >= 256 bits (the key size must be greater than or equal to the hash output size).  Consider using the Jwts.SIG.HS256.key() builder (or HS384.key() or HS512.key()) to create a key guaranteed to be secure enough for your preferred HMAC-SHA algorithm.  See https://tools.ietf.org/html/rfc7518#section-3.2 for more information.
2025-08-04 17:36:58 [http-nio-8083-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-04 17:36:58 [http-nio-8083-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-08-04 17:36:58 [http-nio-8083-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-08-04 17:36:58 [http-nio-8083-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-04 17:36:58 [http-nio-8083-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-08-04 17:37:40 [MessageBroker-1] INFO  o.s.w.s.c.WebSocketMessageBrokerStats - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
