name: Atomix CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  security-events: write

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '21'

jobs:
  # Frontend Jobs
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run tests
      run: npm test -- --coverage --watchAll=false --passWithNoTests
    
    - name: Build application
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build

  # Backend Jobs
  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    - name: Make Maven wrapper executable
      run: chmod +x ./mvnw
    
    - name: Run tests
      run: ./mvnw clean test
      env:
        SPRING_PROFILES_ACTIVE: test
    
    - name: Generate test report
      uses: dorny/test-reporter@v1.9.1
      if: success() || failure()
      with:
        name: Backend Tests
        path: backend/target/surefire-reports/*.xml
        reporter: java-junit
        fail-on-error: false
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build application
      run: ./mvnw clean package -DskipTests
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-jar
        path: backend/target/*.jar

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        category: 'trivy'
      continue-on-error: true

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, security-scan]
    if: always()
    
    steps:
    - name: Notify build status
      run: |
        if [ "${{ needs.frontend-test.result }}" == "success" ] && [ "${{ needs.backend-test.result }}" == "success" ]; then
          echo "Build successful! Ready for deployment."
        else
          echo "Build failed!"
        fi 